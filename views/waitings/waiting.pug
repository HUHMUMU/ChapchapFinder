extends ../layout

block content
    div.waiting.row.col-md-12.border.border-2.border-dark.my-4.rounded-3
        h2 입장 관리
        table
            thead
                tr
                    th 대기번호
                    th 인원
                    th 웨이팅 등록 시간
                    th
                    th
            tbody#top3WaitingUsersCont
                each gt3w in getTop3WaitingUsers
                    tr
                        td= gt3w.waiting_num
                        td= gt3w.user_people
                        td= gt3w.start_time
                        td

                            div.mt-4
                                a.btn.btn-outline-dark.me-2(href="/waitings/cancel.do") 입장 알림
                                a.btn.btn-outline-danger(href="/waitings/cancel.do") 강제 취소
        br
        // 2 위치
        div.waiting-info.row.col-md-4
            h2 대기팀 정보
            table
                thead
                    tr
                        th 대기 번호
                        th 대기 인원
                        th 웨이팅 등록시간
                tbody
                    each wlet3u  in WaitingListExceptTop3Users
                        tr
                            td= wlet3u.waiting_num
                            td= wlet3u.user_people
                            td= wlet3u.start_time
        // 3 위치
        div.waiting-stats.row.col-md-4
            h2 대기 정보
            p 총 대기팀 수: #
            p 총 대기 인원 수: #
        // 4 위치
        div.store-config.row.col-md-4
            h2 웨이팅 관련 설정
            div#store-ads
                label(for='store-ads-input') 가게 홍보 URL:
                input#store-ads-input(type='text' name='storeAdsInput', placeholder='가게 홍보 URL 입력하세요').align-content-center.w-75
                button#store-ads-submit(type='button') 완료
            div#func-setting
                div#time-setup
                    label(for='time-setup-input') 기본 대기 시간 설정 (분):
                    input#time-setup-input(type='number' name='timeSetupInput', placeholder='대기 시간(분)을 입력하세요').align-content-center.w-75
                    button#time-setup-submit(type='button') 완료
                div#max-people-setup
                    label(for='max-people-input') 웨이팅 등록 최대 인원 설정:
                    input#max-people-input(type='number' name='maxPeopleInput', placeholder='최대 인원을 입력하세요').align-content-center.w-75
                    button#max-people-submit(type='button') 완료
                div#closing-time-setup
                    label(for='closing-time-input') 웨이팅 마감 시간 설정:
                    input#closing-time-input(type='time', name='closingTimeInput' , placeholder='대기등록 마감 시간을 입력하세요').align-content-center.w-75
                    button#closing-time-submit(type='button') 완료
            div.form-check.form-switch.d-flex.align-items-center.px-2.py-1.border.border-teritory.rounded
                label.form-check-label.me-5(for="flexSwitchCheckDefault") OFF
                input.form-check-input(type="checkbox", role="switch", id="flexSwitchCheckDefault", style="width: 2.5rem; height: 1.5rem;")
                label.form-check-label.ms-2(for="flexSwitchCheckDefault") ON

    script.
        const top3WaitingUsersCont=document.getElementById("top3WaitingUsersCont");
        setInterval(() => {
            fetch('/waitings/ajaxWaiting.do')
                .then(response => response.json())
                .then(jsonObj => {
                    const getTop3WaitingUsers=jsonObj.getTop3WaitingUsers;
                    top3WaitingUsersCont.innerHTML="";
                    for(const waitObj of getTop3WaitingUsers){
                        top3WaitingUsersCont.insertAdjacentHTML("beforeend",waitingTrComponent(waitObj))
                    }

                })
                .catch(error => console.error(error));
        }, 2000);

        async function modifyStatus(waitingNum,status){
            const response=await fetch(`/waitings/${waitingNum}/${status}/modify.do`,{method:"PUT"});
            if(response.status===200){
                let resultArr=await response.json();
                console.log(resultArr);
                if(resultArr[0]){
                    alert(status+" 성공");
                }else{
                    alert(status + " 이미 수정되었습니다.");

                }


            }else{
                alert("수정 실패:"+response.status)
            }


        }
        // const fetchNewWaitingList = async () => {
        //     const response = await fetch('/adminWaiting.do');
        //     const NewWaitingList = await response.json();
        //     fetchNewWaitingList();
        // };
        // fetchNewWaitingList();
        //a.btn.btn-outline-dark.me-2  (href="/waitings/${waiting_num}/cancel.do") 입장 알림
        //a.btn.btn-outline-danger(href="/waitings/${waiting_num}/cancel.do") 강제 취소
        function waitingTrComponent(waitingObj) {
            return `<tr>
                        <td>${waitingObj.waiting_num}</td>
                        <td>${waitingObj.user_people}</td>
                        <td>${waitingObj.start_time}</td>
                        <td>
                            <div>
                                <button class="btn btn-outline-dark me-2" onclick="modifyStatus(${waitingObj.waiting_num},'완료')">입장 알림</button>
                                <button class="btn btn-outline-danger"onclick="modifyStatus(${waitingObj.waiting_num},'사장취소')">대기 강제 취소</button>
                            </div>
                        </td>

                    </tr>
                    <br>`
            }

